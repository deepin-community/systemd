Index: b/src/core/umac-setup.h
===================================================================
--- /dev/null
+++ b/src/core/umac-setup.h
@@ -0,0 +1,8 @@
+/* SPDX-License-Identifier: LGPL-2.1+ */
+#pragma once
+
+#include <stdbool.h>
+
+#define SELINUX_CB_POLICYLOAD_USEC 999
+
+int umac_setup(bool *loaded_policy);
\ No newline at end of file
Index: b/src/core/umac-setup.c
===================================================================
--- /dev/null
+++ b/src/core/umac-setup.c
@@ -0,0 +1,86 @@
+/* SPDX-License-Identifier: LGPL-2.1+ */
+
+#include <errno.h>
+#include <stdio.h>
+#include <unistd.h>
+
+#if HAVE_SELINUX
+#include <selinux/selinux.h>
+#endif
+
+#include "log.h"
+#include "macro.h"
+#include "umac-setup.h"
+#include "umac-util.h"
+#include "string-util.h"
+#include "initrd-util.h"
+
+#if HAVE_SELINUX
+static int null_policyload2(int seqno __attribute__((unused))) {
+        return 0;
+}
+#endif
+
+int umac_setup(bool *loaded_policy) {
+
+#if HAVE_SELINUX
+        int enforce = 0;
+        usec_t before_load, after_load;
+        int r;
+        static union selinux_callback cb_get = {
+                .func_policyload = NULL,
+        };
+
+        static const union selinux_callback cb_set = {
+                .func_policyload = null_policyload2,
+        };
+
+        assert(loaded_policy);
+
+		/* set selinux callback type for loading policy of umac
+		 * this is the exclusive type of UOS usid
+		*/
+        selinux_set_callback(SELINUX_CB_POLICYLOAD_USEC, cb_set);
+
+		/* if libselinux support loading policy of umac,
+		 * cb_get.func_policyload will be non-null pointer. and then
+		 * call selinux_init_load_policy, it will loading
+		 * umac policy rather than selinux policy.
+		*/
+        cb_get = selinux_get_callback(SELINUX_CB_POLICYLOAD_USEC);
+		if (!cb_get.func_policyload)
+			return 0;
+
+        /* Don't load policy in the initrd if we don't appear to have
+         * it.  For the real root, we check below if we've already
+         * loaded policy, and return gracefully.
+         */
+        if (in_initrd() && access(selinux_path(), F_OK) < 0)
+                return 0;
+
+        /* Make sure we have no fds open while loading the policy and
+         * transitioning */
+        log_close();
+
+        /* Now load the policy */
+        before_load = now(CLOCK_MONOTONIC);
+        r = selinux_init_load_policy(&enforce);
+        if (r == 0) {
+                char timespan[FORMAT_TIMESPAN_MAX];
+
+                umac_reset();
+
+                log_open();
+
+                after_load = now(CLOCK_MONOTONIC);
+
+                log_info("Successfully loaded umac policy in %s.",
+                         format_timespan(timespan, sizeof(timespan), after_load - before_load, 0));
+        } else {
+                log_open();
+                log_warning("Failed to load new umac policy.");
+        }
+#endif
+
+        return 0;
+}
Index: b/src/core/umac-access.c
===================================================================
--- /dev/null
+++ b/src/core/umac-access.c
@@ -0,0 +1,316 @@
+/* SPDX-License-Identifier: LGPL-2.1+ */
+
+#include "selinux-access.h"
+
+#if HAVE_SELINUX
+
+#include <errno.h>
+#include <selinux/avc.h>
+#include <selinux/uavc.h>
+#include <selinux/usec.h>
+#include <selinux/selinux.h>
+#include <stdio.h>
+#include <sys/xattr.h>
+#if HAVE_AUDIT
+#include <libaudit.h>
+#endif
+
+#include "sd-bus.h"
+
+#include "alloc-util.h"
+#include "audit-fd.h"
+#include "bus-util.h"
+#include "log.h"
+#include "path-util.h"
+#include "selinux-util.h"
+#include "umac-util.h"
+#include "stdio-util.h"
+#include "strv.h"
+#include "format-util.h"
+
+static bool initialized = false;
+
+#define DEFAULT_USID_CONTEXT	"root:sysadm_r:sysadm_t:s0"
+
+/*
+   Any time an access gets denied this callback will be called
+   with the audit data.  We then need to just copy the audit data into the msgbuf.
+*/
+static int audit_callback2(
+                void *auditdata,
+                security_class_t cls,
+                char *msgbuf,
+                size_t msgbufsize) {
+
+        const struct audit_info *audit = auditdata;
+        uid_t uid = 0, login_uid = 0;
+        gid_t gid = 0;
+        char login_uid_buf[DECIMAL_STR_MAX(uid_t) + 1] = "n/a";
+        char uid_buf[DECIMAL_STR_MAX(uid_t) + 1] = "n/a";
+        char gid_buf[DECIMAL_STR_MAX(gid_t) + 1] = "n/a";
+
+        if (sd_bus_creds_get_audit_login_uid(audit->creds, &login_uid) >= 0)
+                xsprintf(login_uid_buf, UID_FMT, login_uid);
+        if (sd_bus_creds_get_euid(audit->creds, &uid) >= 0)
+                xsprintf(uid_buf, UID_FMT, uid);
+        if (sd_bus_creds_get_egid(audit->creds, &gid) >= 0)
+                xsprintf(gid_buf, GID_FMT, gid);
+
+        snprintf(msgbuf, msgbufsize,
+                 "%s auid=%s uid=%s gid=%s%s%s%s%s%s%s",
+                 (audit->avc_type == AVC_TYPE_USID) ? "usid" : "", login_uid_buf, uid_buf, gid_buf,
+                 audit->path ? " path=\"" : "", strempty(audit->path), audit->path ? "\"" : "",
+                 audit->cmdline ? " cmdline=\"" : "", strempty(audit->cmdline), audit->cmdline ? "\"" : "");
+
+        return 0;
+}
+
+/*
+   libselinux uses this callback when access gets denied or other
+   events happen. If audit is turned on, messages will be reported
+   using audit netlink, otherwise they will be logged using the usual
+   channels.
+
+   Code copied from dbus and modified.
+*/
+_printf_(2, 3) static int log_callback2(int type, const char *fmt, ...) {
+        va_list ap;
+
+#if HAVE_AUDIT
+        int fd;
+
+        fd = get_audit_fd();
+
+        if (fd >= 0) {
+                _cleanup_free_ char *buf = NULL;
+                int r;
+
+                va_start(ap, fmt);
+                r = vasprintf(&buf, fmt, ap);
+                va_end(ap);
+
+                if (r >= 0) {
+                        audit_log_user_avc_message(fd, AUDIT_USER_AVC, buf, NULL, NULL, NULL, 0);
+                        return 0;
+                }
+        }
+#endif
+
+        return 0;
+}
+
+static int access_init2(sd_bus_error *error) {
+
+        if (!umac_use())
+                return 0;
+
+        if (initialized)
+                return 1;
+
+        if (uavc_open(NULL, 0) != 0) {
+                int enforce, saved_errno = errno;
+
+                enforce = security_getenforce();
+                log_full_errno(enforce != 0 ? LOG_ERR : LOG_WARNING, saved_errno, "Failed to open the SELinux AVC: %m");
+
+                /* If enforcement isn't on, then let's suppress this
+                 * error, and just don't do any AVC checks. The
+                 * warning we printed is hence all the admin will
+                 * see. */
+                return 0;
+        }
+
+        selinux_set_callback(SELINUX_CB_AUDIT, (union selinux_callback) audit_callback2);
+        selinux_set_callback(SELINUX_CB_LOG, (union selinux_callback) log_callback2);
+
+        initialized = true;
+        return 1;
+}
+
+static int mac_selinux_getfilecon2(const char *path, char **con) {
+        char *context = NULL;
+        int r = 0;
+
+        *con = NULL;
+#define MAX_USID 255
+        if (0 == access("/proc/self/attr/usid", F_OK)) {
+                /* Get the file context2 of the unit file */
+                context = (char *)malloc(MAX_USID + 1);
+                if (context == NULL)
+                        return -ENOMEM;
+
+                r = getxattr(path, "security.selinux2", context, MAX_USID);
+                if (r <= 0) {
+                        free(context);
+                        context = NULL;
+                } else {
+                        context[r] = 0;
+                        *con = context;
+                }
+        }
+
+        return 0;
+}
+
+static int mac_selinux_freecon2(char *con) {
+        if (con != NULL)
+                free(con);
+        return 0;
+}
+
+static int sd_bus_creds_get_umac_context(sd_bus_creds *c, char **ret) {
+        assert_return(c, -EINVAL);
+
+#define USID_LEN_MAX 255
+        char proc_usid[32] = {0};
+        char *label_buff = NULL;
+        pid_t pid = 0;
+        int usid_fd = 0;
+        int num = 0;
+        int r = 0;
+
+        *ret = NULL;
+        r = sd_bus_creds_get_pid(c, &pid);
+        if (r < 0)
+                return r;
+        if (pid <= 0)
+                return 0;
+
+        snprintf(proc_usid, sizeof(proc_usid), "/proc/%d/attr/usid", pid);
+        usid_fd = open(proc_usid, O_RDONLY);
+        if (usid_fd < 0)
+                return 0;
+
+        label_buff = (char *)malloc(USID_LEN_MAX + 1);
+        if (label_buff == NULL) {
+                r = -ENOMEM;
+                goto out;
+        }
+
+        num = read(usid_fd, label_buff, USID_LEN_MAX);
+        if (num <= USID_LEN_MAX) {
+                if (num <= 0) {
+                        free(label_buff);
+                        label_buff = NULL;
+                        goto out;
+                }
+                label_buff[num] = 0;
+        } else {
+                free(label_buff);
+                label_buff = NULL;
+                goto out;
+        }
+
+        *ret = label_buff;
+out:
+        close(usid_fd);
+        return r;
+}
+
+/*
+   This function communicates with the kernel to check whether or not it should
+   allow the access.
+   If the machine is in permissive mode it will return ok.  Audit messages will
+   still be generated if the access would be denied in enforcing mode.
+*/
+int umac_unit_access_check(
+                sd_bus_message *message,
+                const char *unit_path,
+                const char *unit_context,
+                const char *permission,
+                const char *function,
+                sd_bus_error *error) {
+
+        _cleanup_(sd_bus_creds_unrefp) sd_bus_creds *creds = NULL;
+        const char *tclass = NULL, *scon = NULL;
+        struct audit_info audit_info = {};
+        _cleanup_free_ char *cl = NULL;
+        char *fcon = NULL;
+        char **cmdline = NULL;
+        int r = 0;
+        char *scon2 = NULL, *fcon2 = NULL;
+
+        assert(message);
+        assert(permission);
+        assert(function);
+        assert(error);
+
+        if (!unit_path)
+                return 0;
+
+        r = access_init2(error);
+        if (r <= 0)
+                return r;
+
+        r = sd_bus_query_sender_creds(
+                        message,
+                        SD_BUS_CREDS_PID|SD_BUS_CREDS_EUID|SD_BUS_CREDS_EGID|
+                        SD_BUS_CREDS_CMDLINE|SD_BUS_CREDS_AUDIT_LOGIN_UID|
+                        SD_BUS_CREDS_AUGMENT /* get more bits from /proc */,
+                        &creds);
+        if (r < 0)
+                goto finish;
+
+        r = mac_selinux_getfilecon2(unit_path, &fcon2);
+        if (r < 0)
+                goto finish;
+
+        if (fcon2) {
+                fcon = fcon2;
+                /* Get the subject usid if get the service file context2 success */
+                r = sd_bus_creds_get_umac_context(creds, &scon2);
+                if (r < 0) {
+                        goto finish;
+                }
+
+                if (scon2 != NULL)
+                        scon = scon2;
+				else
+                        scon = DEFAULT_USID_CONTEXT;
+        } else
+                return 0;
+
+        tclass = "service";
+
+        sd_bus_creds_get_cmdline(creds, &cmdline);
+        cl = strv_join(cmdline, " ");
+
+        audit_info.creds = creds;
+        audit_info.path = unit_path;
+        audit_info.cmdline = cl;
+        audit_info.function = function;
+        audit_info.avc_type = AVC_TYPE_USID;
+
+        r = selinux_check_access(scon, fcon, tclass, permission, &audit_info);
+        if (r < 0)
+                r = sd_bus_error_setf(error, SD_BUS_ERROR_ACCESS_DENIED, "UMAC policy denies access.");
+
+        log_debug("UMAC access check scon=%s tcon=%s tclass=%s perm=%s function=%s path=%s cmdline=%s: %i", scon, fcon, tclass, permission, function,unit_path, cl, r);
+
+finish:
+        mac_selinux_freecon2(fcon2);
+        if (scon2 != NULL)
+                free(scon2);
+
+        if (r < 0 && security_getenforce() != 1) {
+                sd_bus_error_free(error);
+                r = 0;
+        }
+
+        return r;
+}
+
+#else
+
+int umac_unit_access_check(
+                sd_bus_message *message,
+                const char *unit_path,
+                const char *unit_context,
+                const char *permission,
+                const char *function,
+                sd_bus_error *error) {
+
+        return 0;
+}
+
+#endif
Index: b/src/core/selinux-setup.c
===================================================================
--- a/src/core/selinux-setup.c
+++ b/src/core/selinux-setup.c
@@ -14,6 +14,7 @@
 #include "log.h"
 #include "macro.h"
 #include "selinux-setup.h"
+#include "umac-setup.h"
 #include "selinux-util.h"
 #include "string-util.h"
 #include "time-util.h"
@@ -101,6 +102,6 @@ int mac_selinux_setup(bool *loaded_polic
                         log_debug("Unable to load SELinux policy. Ignoring.");
         }
 #endif
-
+        umac_setup(loaded_policy);
         return 0;
 }
Index: b/src/core/selinux-access.h
===================================================================
--- a/src/core/selinux-access.h
+++ b/src/core/selinux-access.h
@@ -5,10 +5,29 @@
 
 #include "manager.h"
 
-int mac_selinux_access_check_internal(sd_bus_message *message, const char *unit_path, const char *unit_label, const char *permission, const char *function, sd_bus_error *error);
+struct audit_info {
+        sd_bus_creds *creds;
+        const char *path;
+        const char *cmdline;
+        const char *function;
+#define AVC_TYPE_SELINUX	1
+#define AVC_TYPE_USID	2
+        int avc_type;
+};
+
 
+int mac_selinux_access_check_internal(sd_bus_message *message, const char *unit_path, const char *unit_label, const char *permission, const char *function, sd_bus_error *error);
+int umac_unit_access_check(sd_bus_message *message, const char *unit_path, const char *unit_context, const char *permission, const char *function, sd_bus_error *error);
 #define mac_selinux_access_check(message, permission, error) \
         mac_selinux_access_check_internal((message), NULL, NULL, (permission), __func__, (error))
 
-#define mac_selinux_unit_access_check(unit, message, permission, error) \
-        mac_selinux_access_check_internal((message), (unit)->fragment_path, (unit)->access_selinux_context, (permission), __func__, (error))
+#define mac_selinux_unit_access_check(unit, message, permission, error) ({ \
+        int RC;		\
+        do {		\
+                RC = mac_selinux_access_check_internal((message), (unit)->fragment_path, (unit)->access_selinux_context, (permission), __func__, (error)); \
+                if (RC < 0)	\
+                        break;	\
+                RC = umac_unit_access_check((message), (unit)->fragment_path, (unit)->access_selinux_context, (permission), __func__, (error)); \
+        } while (0);		\
+        RC;		\
+})
Index: b/src/core/selinux-access.c
===================================================================
--- a/src/core/selinux-access.c
+++ b/src/core/selinux-access.c
@@ -26,12 +26,6 @@
 
 static bool initialized = false;
 
-struct audit_info {
-        sd_bus_creds *creds;
-        const char *path;
-        const char *cmdline;
-        const char *function;
-};
 
 /*
    Any time an access gets denied this callback will be called
@@ -256,6 +250,7 @@ int mac_selinux_access_check_internal(
                 .path = unit_path,
                 .cmdline = cl,
                 .function = function,
+                .avc_type = AVC_TYPE_SELINUX,
         };
 
         r = selinux_check_access(scon, acon, tclass, permission, &audit_info);
Index: b/src/core/meson.build
===================================================================
--- a/src/core/meson.build
+++ b/src/core/meson.build
@@ -55,6 +55,8 @@ libcore_sources = files(
         'scope.c',
         'selinux-access.c',
         'selinux-setup.c',
+        'umac-setup.c',
+        'umac-access.c',
         'service.c',
         'show-status.c',
         'slice.c',
Index: b/src/shared/meson.build
===================================================================
--- a/src/shared/meson.build
+++ b/src/shared/meson.build
@@ -149,6 +149,7 @@ shared_sources = files(
         'rm-rf.c',
         'securebits-util.c',
         'selinux-util.c',
+        'umac-util.c',
         'serialize.c',
         'service-util.c',
         'sleep-config.c',
Index: b/src/shared/umac-util.c
===================================================================
--- /dev/null
+++ b/src/shared/umac-util.c
@@ -0,0 +1,37 @@
+/* SPDX-License-Identifier: LGPL-2.1+ */
+
+#if HAVE_SELINUX
+#include <selinux/selinux.h>
+#endif
+#include "umac-util.h"
+
+#if HAVE_SELINUX
+static int cached_use = -1;
+#endif
+
+bool umac_use(void) {
+#if HAVE_SELINUX
+        if (cached_use < 0)
+                cached_use = security_getenforce() >= 0;
+
+        return cached_use;
+#else
+        return false;
+#endif
+}
+
+void umac_reset(void) {
+#if HAVE_SELINUX
+        cached_use = -1;
+#endif
+}
+
+int umac_init(void) {
+        int r = 0;
+
+#if HAVE_SELINUX
+        if (!umac_use())
+                return 0;
+#endif
+        return r;
+}
Index: b/src/shared/umac-util.h
===================================================================
--- /dev/null
+++ b/src/shared/umac-util.h
@@ -0,0 +1,8 @@
+/* SPDX-License-Identifier: LGPL-2.1+ */
+#pragma once
+
+#include <stdbool.h>
+
+bool umac_use(void);
+void umac_reset(void);
+int umac_init(void);
Index: b/src/core/dbus-manager.c
===================================================================
--- a/src/core/dbus-manager.c
+++ b/src/core/dbus-manager.c
@@ -2613,6 +2613,7 @@ static int method_disable_unit_files_gen
         UnitFileFlags flags;
         size_t n_changes = 0;
         int r;
+        Unit *u;
 
         assert(message);
         assert(m);
@@ -2647,6 +2648,21 @@ static int method_disable_unit_files_gen
         if (r == 0)
                 return 1; /* No authorization for now, but the async polkit stuff will call us again when it has it */
 
+        if (l) {
+                for (int i = 0; l[i]; i++) {
+                        r = manager_load_unit(m, l[i], NULL, error, &u);
+                        if (r < 0)
+                                break;
+
+                        r = mac_selinux_unit_access_check(
+                                u, message,
+                                "disable",
+                                error);
+                        if (r < 0)
+                                return r;
+                }
+        }
+
         r = call(m->runtime_scope, flags, NULL, l, &changes, &n_changes);
         m->unit_file_state_outdated = m->unit_file_state_outdated || n_changes > 0; /* See comments for this variable in manager.h */
         if (r < 0)
